// Teste com os endpoints mais recentes conforme documenta√ß√£o da Z-API
import axios from 'axios';

async function testLatestAPIEndpoints() {
  try {
    // Credenciais da inst√¢ncia
    const instanceId = '3DF871A7ADFB20FB49998E66062CE0C1';
    const token = 'A4E42029C248B72DA0842F47';
    
    console.log('üîç Testando endpoints conforme documenta√ß√£o oficial de maio/2025');
    console.log(`Inst√¢ncia: ${instanceId}`);
    console.log(`Token: ${token.substring(0, 5)}...`);
    
    // De acordo com https://developer.z-api.io/instance/status
    // O endpoint correto para verificar status √© GET /v2/status
    
    console.log('\n--- TESTE 1: Endpoint de Status (v2/status) ---');
    
    // Vamos tentar v√°rias configura√ß√µes para encontrar a correta
    const baseUrls = [
      'https://api.z-api.io', // Base sem inst√¢ncia
      `https://api.z-api.io/instances/${instanceId}`, // Base com inst√¢ncia no path
    ];
    
    const endpoints = [
      '/v2/status', // Conforme documenta√ß√£o
      '/status', // Formato alternativo
    ];
    
    // Cabe√ßalhos comuns
    const headers = {
      'Content-Type': 'application/json',
      'Client-Token': token
    };
    
    for (const baseUrl of baseUrls) {
      for (const endpoint of endpoints) {
        const fullUrl = `${baseUrl}${endpoint}`;
        console.log(`\nTentando: ${fullUrl}`);
        
        try {
          const response = await axios.get(fullUrl, { headers });
          console.log(`Status HTTP: ${response.status}`);
          console.log('Resposta:', JSON.stringify(response.data, null, 2));
          
          if (!response.data.error) {
            console.log('‚úÖ SUCESSO! Formato v√°lido encontrado.');
            console.log(`URL que funciona: ${fullUrl}`);
          }
        } catch (error) {
          console.log(`‚ùå Erro: ${error.message}`);
          if (error.response) {
            console.log(`Status HTTP: ${error.response.status}`);
            console.log('Detalhes:', JSON.stringify(error.response.data, null, 2));
          }
        }
      }
    }
    
    // Teste o endpoint de restart tamb√©m
    console.log('\n--- TESTE 2: Endpoint de Restart (v2/restart) ---');
    
    // De acordo com https://developer.z-api.io/instance/restart
    // O endpoint correto para restart √© GET /v2/restart
    
    const restartEndpoints = [
      '/v2/restart', // Conforme documenta√ß√£o
      '/restart', // Formato alternativo
    ];
    
    for (const baseUrl of baseUrls) {
      for (const endpoint of restartEndpoints) {
        const fullUrl = `${baseUrl}${endpoint}`;
        console.log(`\nTentando: ${fullUrl}`);
        
        try {
          const response = await axios.get(fullUrl, { headers });
          console.log(`Status HTTP: ${response.status}`);
          console.log('Resposta:', JSON.stringify(response.data, null, 2));
          
          if (!response.data.error) {
            console.log('‚úÖ SUCESSO! Formato v√°lido encontrado.');
            console.log(`URL que funciona: ${fullUrl}`);
          }
        } catch (error) {
          console.log(`‚ùå Erro: ${error.message}`);
          if (error.response) {
            console.log(`Status HTTP: ${error.response.status}`);
            console.log('Detalhes:', JSON.stringify(error.response.data, null, 2));
          }
        }
      }
    }
    
    // Teste com padr√£o sem token nem inst√¢ncia no path (apenas no header)
    console.log('\n--- TESTE 3: Cabe√ßalhos com Inst√¢ncia e Token ---');
    
    const instanceHeaders = {
      'Content-Type': 'application/json',
      'Client-Token': token,
      'Instance-Id': instanceId
    };
    
    try {
      const noPathUrl = 'https://api.z-api.io/v2/status';
      console.log(`\nTentando: ${noPathUrl} com Instance-Id no cabe√ßalho`);
      
      const response = await axios.get(noPathUrl, { headers: instanceHeaders });
      console.log(`Status HTTP: ${response.status}`);
      console.log('Resposta:', JSON.stringify(response.data, null, 2));
      
      if (!response.data.error) {
        console.log('‚úÖ SUCESSO! Formato v√°lido encontrado.');
      }
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
      if (error.response) {
        console.log(`Status HTTP: ${error.response.status}`);
        console.log('Detalhes:', JSON.stringify(error.response.data, null, 2));
      }
    }
    
    // Verificar tamb√©m se precisamos usar um subdom√≠nio espec√≠fico com o ID da inst√¢ncia
    console.log('\n--- TESTE 4: Subdom√≠nio com ID da Inst√¢ncia ---');
    
    try {
      const subdomainUrl = `https://${instanceId.toLowerCase()}.api.z-api.io/v2/status`;
      console.log(`\nTentando: ${subdomainUrl}`);
      
      const response = await axios.get(subdomainUrl, { headers });
      console.log(`Status HTTP: ${response.status}`);
      console.log('Resposta:', JSON.stringify(response.data, null, 2));
      
      if (!response.data.error) {
        console.log('‚úÖ SUCESSO! Formato v√°lido encontrado.');
      }
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
      if (error.response) {
        console.log(`Status HTTP: ${error.response.status}`);
        console.log('Detalhes:', JSON.stringify(error.response.data, null, 2));
      }
    }
    
    console.log('\n=================================================');
    console.log('üìã CONCLUS√ÉO');
    console.log('=================================================');
    console.log('Se todos os testes falharam, isso confirma que:');
    console.log('1. As credenciais provavelmente est√£o inv√°lidas ou expiradas');
    console.log('2. A inst√¢ncia pode n√£o estar mais dispon√≠vel ou ativa');
    
    console.log('\nPr√≥ximos passos recomendados:');
    console.log('1. Verifique no painel administrativo da Z-API se a inst√¢ncia est√° ativa');
    console.log('2. Gere novas credenciais para esta inst√¢ncia');
    console.log('3. Se dispon√≠vel, tente usar outra inst√¢ncia com credenciais v√°lidas');
  } catch (error) {
    console.error('Erro geral nos testes:', error);
  }
}

// Executar o teste
testLatestAPIEndpoints();